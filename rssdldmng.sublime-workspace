{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"lgo",
				"logInfo"
			],
			[
				"resou",
				"resourceUrl"
			],
			[
				"home",
				"homeassistant"
			],
			[
				"cache",
				"cache_path_tmp"
			],
			[
				"set",
				"set_inprogress"
			],
			[
				"get",
				"getall"
			],
			[
				"do",
				"download-dir"
			],
			[
				"chec",
				"checkLibrary"
			],
			[
				"RSS",
				"RssFeed"
			],
			[
				"for",
				"forEach"
			],
			[
				"compo",
				"component"
			],
			[
				"revers",
				"reverseLookup"
			],
			[
				"fon",
				"font-weight"
			],
			[
				"padding-",
				"padding-bottom"
			],
			[
				"to",
				"tokenChangeSubs"
			],
			[
				"them",
				"themeName"
			],
			[
				"IsObj",
				"IsObjectiveSettingAttrs"
			],
			[
				"obj",
				"objectiveValue"
			],
			[
				"objective",
				"objectiveType"
			],
			[
				"ac",
				"activities"
			],
			[
				"obje",
				"objectiveType"
			],
			[
				"objec",
				"objectiveType"
			],
			[
				"rename",
				"renamed_extracted_dir"
			],
			[
				"extract",
				"extracted_dir"
			],
			[
				"sen",
				"sentences"
			],
			[
				"ma",
				"margin-bottom"
			],
			[
				"margin",
				"margin-top"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "[Unit]\nDescription=RSS Downloader Service\nAfter=multi-user.target\n\n[Service]\nRestart=always\nType=simple\nExecStart=rssdldmng_exec\nUser=rssdldmng_user\nKillSignal=SIGINT\n\n[Install]\nWantedBy=multi-user.target",
			"file": "rssdldmng.service.orig",
			"file_size": 216,
			"file_write_time": 131774953438843612,
			"settings":
			{
				"buffer_size": 204,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 1322,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/E/stuff/floorplan/floorplan.html",
			"settings":
			{
				"buffer_size": 1050,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/E/stuff/floorplan/floorplan.js",
			"settings":
			{
				"buffer_size": 9558,
				"line_ending": "Unix"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 1016,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "[Unit]\nDescription=RSS Downloader Service\nAfter=multi-user.target\n\n[Service]\nRestart=always\nType=simple\nExecStart=/home/vagrant/.pyenv/shims/rssdldmng\nUser=vagrant\nKillSignal=SIGINT\n\n[Install]\nWantedBy=multi-user.target\n",
			"file": "rssdldmng.service",
			"file_size": 220,
			"file_write_time": 131775188509798618,
			"settings":
			{
				"buffer_size": 220,
				"line_ending": "Unix"
			}
		},
		{
			"file": "install.sh",
			"settings":
			{
				"buffer_size": 314,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "make_service.sh",
			"settings":
			{
				"buffer_size": 560,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"\"\"Module to help with parsing and generating configuration files.\"\"\"\nimport logging\nimport os\nimport sys\nimport re\nimport shutil\nimport json\n\nfrom rssdldmng.const import (\n    CONFIG_DIR_NAME,\n    CONFIG_FILE,\n)\n\n\n# default config\ndef_config = {\n    \"feed_poll_interval\": 300,\n    \"lib_update_interval\": 60,\n    \"feeds\": [\n        {\n            \"uri\" : \"http://showrss.info/other/all.rss\",\n            \"download_dir\" : \"/media/Media/Series/{seriesname}/Season{seasonno:02}/\",\n            \"filters\": {\n                \"seriesname\": [\"Elementary\"],\n                \"quality\": [\"720p\"]\n            }\n        }\n    ],\n    \"transmission\": {\n        \"host\": 'localhost',\n        \"port\": 9091,\n        \"username\": \"user\",\n        \"password\": \"pass\"\n    },\n    \"kodi\": {\n        \"host\": 'localhost',\n        \"port\": 8080,\n        \"username\": \"user\",\n        \"password\": \"pass\"\n    }\n}\n\ndef ensure_config_path(config_dir: str) -> None:\n    \"\"\"Validate the configuration directory.\"\"\"\n    if not os.path.isdir(config_dir):\n        if config_dir != get_default_config_dir():\n            print(\"Fatal Error: Specified configuration directory does not exist {}\".format(config_dir))\n            sys.exit(1)\n        else:\n            if not os.path.exists(config_dir):\n                try:\n                    os.makedirs(config_dir)\n                except OSError as exc: # Guard against race condition\n                    if exc.errno != errno.EEXIST:\n                        raise\n\n\ndef get_default_config_dir() -> str:\n    \"\"\"Put together the default configuration directory based on the OS.\"\"\"\n    data_dir = os.getenv('APPDATA') if os.name == \"nt\" else os.path.expanduser('~')\n    return os.path.join(data_dir, CONFIG_DIR_NAME)\n\n\ndef find_config_file(config_dir: str) -> str:\n    \"\"\"Look in given directory for supported configuration files.\"\"\"\n    if config_dir is None:\n        return None\n    config_path = os.path.join(config_dir, CONFIG_FILE)\n    return config_path if os.path.isfile(config_path) else None\n\n\ndef create_default_config(config_dir: str, detect_location: bool = True) -> str:\n    \"\"\"Create a default configuration file in given configuration directory.\n    Return path to new config file if success, None if failed.\n    This method needs to run in an executor.\n    \"\"\"\n    config_path = os.path.join(config_dir, CONFIG_FILE)\n\n    try:\n        if not os.path.exists(os.path.dirname(config_path)):\n            try:\n                os.makedirs(os.path.dirname(config_path))\n            except OSError as exc: # Guard against race condition\n                if exc.errno != errno.EEXIST:\n                    raise\n        with open(config_path, 'wt') as config_file:\n            config_file.write(json.dumps(def_config, sort_keys=True, indent=4))\n        return config_path\n\n    except IOError:\n        print(\"Unable to create default configuration file\", config_path)\n        return None\n\n\ndef load_config_file(config_dir: str):\n    config_path = os.path.join(config_dir, CONFIG_FILE)\n\n    try:\n        return json.loads(open(config_path).read())\n    \n    except IOError:\n        print(\"Unable to read configuration file\", config_path)\n        return None\n\n\ndef ensure_config_file(config_dir: str) -> str:\n    \"\"\"Ensure configuration file exists.\"\"\"\n    config_path = find_config_file(config_dir)\n\n    if config_path is None:\n        print(\"Unable to find configuration. Creating default one in\", config_dir)\n        config_path = create_default_config(config_dir)\n\n    if config_path is None:\n        print('Error getting configuration path')\n        sys.exit(1)\n\n    return config_path\n\n",
			"file": "rssdldmng/config.py",
			"file_size": 3715,
			"file_write_time": 131774981071763044,
			"settings":
			{
				"buffer_size": 3596,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "rssdldmng/const.py",
			"settings":
			{
				"buffer_size": 415,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "rssdldmng/rssdld/downloader.py",
			"settings":
			{
				"buffer_size": 5493,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "rssdldmng/rssdld/showsdb.py",
			"settings":
			{
				"buffer_size": 2818,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "rssdldmng/rssdldmng.py",
			"settings":
			{
				"buffer_size": 2856,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "rssdldmng/rssdldapi.py",
			"settings":
			{
				"buffer_size": 1497,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import sys, os, re, shutil, json, urllib, urllib3, threading, logging\nfrom http.server import BaseHTTPRequestHandler, HTTPServer#, ThreadingHTTPServer\nfrom socketserver import ThreadingMixIn\n\n_LOGGER = logging.getLogger(__name__)\n\n\nhere = os.path.dirname(os.path.realpath(__file__))\n\n\n# exists only in python 3.7\nclass ThreadingHTTPServer(ThreadingMixIn, HTTPServer):\n    allow_reuse_address = True\n\n    def shutdown(self):\n        self.socket.close()\n        HTTPServer.shutdown(self)\n\n\nclass RESTRequestHandler(BaseHTTPRequestHandler):\n\n    def do_HEAD(self):\n        self.handle_method('HEAD')\n    def do_GET(self):\n        self.handle_method('GET')\n    def do_POST(self):\n        self.handle_method('POST')\n    def do_PUT(self):\n        self.handle_method('PUT')\n    def do_DELETE(self):\n        self.handle_method('DELETE')\n\n    def get_payload(self):\n        payload_len = int(self.headers.getheader('content-length', 0))\n        payload = self.rfile.read(payload_len)\n        payload = json.loads(payload)\n        return payload\n\n    def handle_file(self, method, route):\n        if method == 'GET':\n            try:\n                f = open(os.path.join(here, route['file']))\n                try:\n                    self.send_response(200)\n                    if 'media_type' in route:\n                        self.send_header('Content-type', route['media_type'])\n                    self.end_headers()\n                    shutil.copyfileobj(f, self.wfile)\n                finally:\n                    f.close()\n            except:\n                self.send_response(404)\n                self.end_headers()\n                self.wfile.write('File not found\\n'.encode('utf-8'))\n        else:\n            self.send_response(405)\n            self.end_headers()\n            self.wfile.write('Only GET is supported\\n'.encode('utf-8'))\n\n    def handle_api(self, method, route):\n        if method in route:\n            content = route[method](self)\n            if content is not None:\n                self.send_response(200)\n                if 'media_type' in route:\n                    self.send_header('Content-type', route['media_type'])\n                self.end_headers()\n                if method != 'DELETE':\n                    try:\n                        self.wfile.write(json.dumps(content).encode('utf-8'))\n                    except TypeError:\n                        self.wfile.write(json.dumps(content, default=lambda x: x.__dict__).encode('utf-8'))\n            else:\n                self.send_response(404)\n                self.end_headers()\n                self.wfile.write('Not found\\n'.encode('utf-8'))\n        else:\n            self.send_response(405)\n            self.end_headers()\n            self.wfile.write('{0} is not supported for {1}\\n'.format(method, self.path).encode('utf-8'))\n\n    def handle_method(self, method):\n        route = self.get_route()\n        if route is None:\n            self.send_response(404)\n            self.end_headers()\n            self.wfile.write('Route not found\\n'.encode('utf-8'))\n        else:\n            if 'file' in route:\n                self.handle_file(method, route)\n            else:\n                self.handle_api(method, route)\n\n    def get_route(self):\n        if self.server and self.server.routes:\n            for path, route in self.server.routes.items():\n                if re.match(path, self.path):\n                    return route\n        return None\n\n\nclass RESTHttpServer():\n    def __init__(self, ip, port, routes = None):\n        _LOGGER.info('Starting HTTP server on port {0}'.format(port))\n        self.server = ThreadingHTTPServer((ip,port), RESTRequestHandler)\n        self.server.routes = routes\n#        self.server.routes = {\n#            r'^/$'          : {'file': 'web/index.html', 'media_type': 'text/html'},\n#            r'^/records$'   : {'GET': get_records, 'media_type': 'application/json'},\n#            r'^/record/'    : {'GET': get_record, 'PUT': set_record, 'DELETE': delete_record, 'media_type': 'application/json'}}\n\n    def start(self):\n        self.server_thread = threading.Thread(target=self.server.serve_forever)\n        self.server_thread.daemon = True\n        self.server_thread.start()\n        _LOGGER.info('Started HTTP server at {0}'.format(self.server.server_address))\n\n    def waitForThread(self):\n        self.server_thread.join()\n\n    def stop(self):\n        _LOGGER.info('Stopping HTTP server')\n        self.server.shutdown()\n        self.waitForThread()\n\n",
			"file": "rssdldmng/restserver.py",
			"file_size": 4597,
			"file_write_time": 131775159848232725,
			"settings":
			{
				"buffer_size": 4472,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 25 files for \"SeriesName\"\n\nE:\\VM\\dev_box\\rssdldmng\\rssdldmng\\config.py:\n   20          {\n   21              \"uri\" : \"http://showrss.info/other/all.rss\",\n   22:             \"download_dir\" : \"/media/Media/Series/{SeriesName}/Season{SeasonNo:02}/\",\n   23              \"filters\": {\n   24:                 \"SeriesName\": [\"Elementary\"],\n   25                  \"Quality\": [\"720p\"]\n   26              }\n\nE:\\VM\\dev_box\\rssdldmng\\rssdldmng\\rssdld\\episode.py:\n   65              self.episode = getNumbering(self.title)[1]\n   66              self.season = getNumbering(self.title)[0]\n   67:             self.dir = dir.format(SeriesName=self.showname, SeasonNo=self.season)\n   68  \n   69          if entries:\n   ..\n   79              try:\n   80                  log.debug(\"check showname {0}\".format(self.showname))\n   81:                 if self.showname not in filters['seriesname']:\n   82                      return False\n   83              except:\n\n4 matches across 2 files\n\n\nSearching 26 files for \"urllib2\"\n\nE:\\VM\\dev_box\\rssdldmng\\rssdldmng\\rssdldapi.py:\n    1: import sys, os, re, shutil, json, urllib, urllib2, BaseHTTPServer\n    2  \n    3  # Fix issues with decoding HTTP responses\n    .\n   33              payload = json.dumps(payload)\n   34          # PUT or POST\n   35:         response = urllib2.urlopen(MethodRequest(url, payload, {'Content-Type': 'application/json'}, method=with_payload_method))\n   36      else:\n   37          # GET\n   38:         response = urllib2.urlopen(url)\n   39      response = response.read().decode()\n   40      return json.loads(response)\n   41  \n   42: class MethodRequest(urllib2.Request):\n   43      'See: https://gist.github.com/logic/2715756'\n   44      def __init__(self, *args, **kwargs):\n   ..\n   48          else:\n   49              self._method = None\n   50:         return urllib2.Request.__init__(self, *args, **kwargs)\n   51  \n   52      def get_method(self, *args, **kwargs):\n   53:         return self._method if self._method is not None else urllib2.Request.get_method(self, *args, **kwargs)\n   54  \n   55  class RESTRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):\n\n6 matches in 1 file\n\n\nSearching 26 files for \"urllib3\"\n\nE:\\VM\\dev_box\\rssdldmng\\rssdldmng\\rssdld\\kodidb.py:\n    8  \n    9  log = logging.getLogger(__name__)\n   10: logging.getLogger(\"urllib3\").setLevel(logging.WARNING)\n   11  log.setLevel(logging.WARNING)\n   12  \n\nE:\\VM\\dev_box\\rssdldmng\\rssdldmng\\rssdld\\transmission.py:\n   10  \n   11  log = logging.getLogger(__name__)\n   12: logging.getLogger(\"urllib3\").setLevel(logging.WARNING)\n   13  log.setLevel(logging.WARNING)\n   14  \n\n2 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 2637,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "rssdldmng/rssdld/episode.py",
			"settings":
			{
				"buffer_size": 2904,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 145.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ra",
				"Raw Line Edit: Toggle"
			],
			[
				"raw",
				"Raw Line Edit: Toggle"
			],
			[
				"line ",
				"Line Endings Unify"
			],
			[
				"refre",
				"Enable Autorefresh"
			],
			[
				"au",
				"Enable Autorefresh"
			],
			[
				"compare",
				"Compare with..."
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"refres",
				"Enable Autorefresh"
			],
			[
				"json",
				"JSON Reindent: reindent file or selection"
			],
			[
				"line",
				"Line Endings Unify"
			],
			[
				"conv",
				"Convert Case: Lower Case"
			],
			[
				"sync",
				"Package Syncing: Push Settings"
			],
			[
				"the",
				"Boxy Theme: Configuration"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"xml",
				"Indent XML"
			],
			[
				"project",
				"Project: Refresh Folders"
			],
			[
				"op",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"open",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"pa",
				"Package Control: Disable Package"
			],
			[
				"tabs",
				"View: Toggle Tabs"
			],
			[
				"theme",
				"Material Theme: Configuration"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"color",
				"Color Picker: Insert Color"
			],
			[
				"colo",
				"Package Control: Install Local Dependency"
			],
			[
				"Package Control: In",
				"Package Control: Install Package"
			],
			[
				"",
				"Material Theme: Advanced configuration"
			],
			[
				"incre",
				"Material Theme: Advanced configuration"
			],
			[
				"install ",
				"Package Control: Install Package"
			]
		],
		"width": 478.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/VM/dev_box/rssdldmng",
		"/E/VM/dev_box/rssdldmng/rssdldmng",
		"/E/VM/dev_box/rssdldmng/rssdldmng/rssdld"
	],
	"file_history":
	[
		"/E/stuff/floorplan/build_json.py",
		"/E/stuff/floorplan/build_config.py",
		"/E/stuff/floorplan/floorplan-data.json",
		"/D/p4/dev/ixload/protocols/voice/main/protocols/buildallvoiceplugins.vcxproj",
		"/D/p4/dev/packages/ixvoiceplugin/main/IxVoicePluginVS9.sln",
		"/D/p4/dev/packages/ixvoiceplugin/main/src/IxVoicePlugin/IxVoicePlugin.vcproj",
		"/E/VM/dev_box/rssdldmng/make_service.sh",
		"/E/VM/dev_box/Vagrantfile",
		"/E/VM/hass_box/Vagrantfile",
		"/C/Users/livflore/AppData/Local/Temp/7zOCBEC4055/config.py",
		"/E/VM/dev_box/rssdldmng/install.sh",
		"/E/VM/dev_box/rssdldmng/rssdldmng.sublime-project",
		"/C/Users/livflore/AppData/Roaming/Kodi/addons/service.xbmc.versioncheck/service.py",
		"/D/code/rpi/kodi_addons/service.cronxbmc/resources/settings.xml",
		"/C/Users/livflore/AppData/Roaming/Kodi/kodi.log",
		"/C/Program Files (x86)/Kodi/addons/script.module.pil/lib/PIL/_util.py",
		"/D/code/hackerrank/MorganString/tests/output.0",
		"/D/code/hackerrank/MorganString/tests/input.0",
		"/D/code/hackerrank/MorganString/tests/output.1",
		"/D/code/hackerrank/MorganString/tests/input.1",
		"/D/code/hackerrank/BeautifulQuadruples/tests/output.1",
		"/D/code/hackerrank/BeautifulQuadruples/tests/input.1",
		"/C/Users/livflore/Downloads/ubuntu-14.04-server-cloudimg-amd64.ovf",
		"/C/Users/livflore/Downloads/ubuntu-16.04-server-cloudimg-amd64-disk1.vmdk",
		"/D/code/hackerrank/PasswordCracker/tests/output.20",
		"/D/code/hackerrank/PasswordCracker/tests/input.0",
		"/D/code/hackerrank/PasswordCracker/tests/input.20",
		"/D/code/hackerrank/PasswordCracker/tests/input.30",
		"/D/code/hackerrank/PasswordCracker/tests/output.30",
		"/D/code/hackerrank/PasswordCracker/tests/output.1",
		"/D/code/hackerrank/PasswordCracker/tests/input.1",
		"/Z/p4/dev2/ixload/protocols/voice/main/versioninfo.ini",
		"/Z/p4/dev2/ixload/protocols/voice/main/buildinfo.ini",
		"/C/Users/livflore/Desktop/pkt.dump.log",
		"/C/Users/livflore/AppData/Local/Temp/IxServ20180512-020459-1.log",
		"/Z/p4/dev/ixos/main/linux/port/ixnam/octeon/src/ethernet-ixia.c",
		"/C/Users/livflore/AppData/Local/Temp/IxServ20180512-020459.log",
		"/C/Users/livflore/AppData/Local/Temp/IxServ20180508-221013-3.log",
		"/Z/ccollab",
		"/C/Users/livflore/Desktop/stream.html",
		"/Z/p4/dev/ixload/protocols/voice/main/voicedevbuild.cmd",
		"/D/code/hackerrank/run.py",
		"/Z/dev/hackerrank/run.sh",
		"/D/code/hackerrank/MaxPalindromes/tests/input.6",
		"/D/code/hackerrank/MaxPalindromes/tests/output.6",
		"/D/code/hackerrank/MaxPalindromes/tests/output.6.calc",
		"/D/code/hackerrank/MaxPalindromes/tests/output.21.calc",
		"/D/code/hackerrank/MaxPalindromes/tests/output.21",
		"/D/code/hackerrank/MaxPalindromes/tests/input.21",
		"/C/Users/livflore/AppData/Local/Temp/p4v/CZC7428G2V_ssl_uscal-cm-p4-1.lbj.is.keysight.com_1666/ixos/main/ixos-build_context#4739.ini",
		"//hulk-voiceqa/RegressionsTKO/Regression_all_results/8.50.0.332-EB/6.50_VoLTE_Functionality_HwRTP/IxLoad.xpt",
		"/C/Users/livflore/AppData/Roaming/IxP4Tools/IxP4Tools_vsix.log",
		"/C/Users/livflore/AppData/Roaming/IxTools/IxTools.log",
		"/C/Users/livflore/AppData/Roaming/IxProjectTools/IxProjectTools_vsix.log",
		"/C/Users/livflore/AppData/Local/Temp/_tc/busyrtpdbg.sh",
		"/C/Users/livflore/AppData/Local/Temp/_tc/start.sh",
		"/Z/busyrtpdbg.sh",
		"/C/Users/livflore/source/repos/Solution1/Solution1.sln",
		"/C/Users/livflore/AppData/Roaming/IxTools/p4.log",
		"/Z/p4/dev/ixload/protocols/voice/main/devbuild.cmd",
		"/C/Users/livflore/AppData/Local/Temp/7zOC01A9E97/start.sh",
		"/Z/p4/dev/packages/linux_3.10/versions.ini",
		"/C/Users/livflore/AppData/Local/Temp/p4v/CZC7428G2V_ssl_uscal-cm-p4-1.lbj.is.keysight.com_1666/ixos/main/SConstruct#153",
		"/C/Users/livflore/AppData/Local/Temp/p4v/CZC7428G2V_ssl_uscal-cm-p4-1.lbj.is.keysight.com_1666/ixos/main/build_ixos_hogan#23.sh",
		"/C/Users/livflore/AppData/Local/Temp/7zO4E68DA7A/IxServ20180411-120216.log",
		"/C/Users/livflore/AppData/Local/Temp/7zE4E68EB4A/IxServ20180411-120216.log",
		"/X/pkgget_auto.sh",
		"/C/Users/livflore/Desktop/pkgget_output.log",
		"/C/Users/livflore/AppData/Local/Temp/p4v/CZC7428G2V_ssl_uscal-cm-p4-1.lbj.is.keysight.com_1666/ixos/main/build_hogan_release#3.sh",
		"/R/.homeassistant/include/automations.yaml",
		"/R/.homeassistant/packages/weather.yaml",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/build.sh",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/buildinfo.ini",
		"/R/.homeassistant/custom_components/rssdld.py",
		"/R/.homeassistant/configuration.yaml",
		"/R/.homeassistant/include/groups/tab-home.yaml",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/build/tool/install-sh",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/build/tool/cmake/extract_includes.bat.in",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/build/tool/Makefile.in",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/build/tool/cmake/install.cmake",
		"/R/.homeassistant/www/custom_ui/tvshows/ha-tvshows.html",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/src/src/Makefile.am",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/src/src/Makefile.in",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/build/tool/Makefile",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/src/Makefile.am",
		"/Z/p4/dev/packages/3rdParty/google_protobuf/3.5.1/build/tool/Makefile.am",
		"/H/.homeassistant/README.md",
		"/D/programs/stats/grafana/data/plugins/vonage-status-panel/dist/module.js",
		"/D/programs/stats/grafana/data/plugins/vonage-status-panel/dist/status_ctrl.js",
		"/C/Users/livflore/Desktop/to install",
		"/D/code/rpi/sampleconfigs/smarthome-master/packages/away.yaml",
		"/D/code/rpi/sampleconfigs/smarthome-master/packages/lights.yaml",
		"/D/code/rpi/sampleconfigs/smarthome-master/packages/settings.yaml",
		"/D/code/rpi/sampleconfigs/smarthome-master/packages/homesecurity.yaml",
		"/D/code/rpi/sampleconfigs/smarthome-master/packages/homeassistant.yaml",
		"/D/code/rpi/sampleconfigs/smarthome-master/packages/wfh.yaml",
		"//192.168.1.32/homeassistant/packages/notify.yaml",
		"/D/code/rpi/sampleconfigs/smarthome-master/templates/home_status.yaml",
		"/D/code/rpi/sampleconfigs/homeassistant-config-arsaboo/packages/weather.yaml",
		"//192.168.1.32/homeassistant/configuration.yaml",
		"//192.168.1.32/homeassistant/secrets.yaml",
		"//192.168.1.32/homeassistant/hass.sublime-project",
		"//192.168.1.32/homeassistant/include/groups/tab-weather.yaml",
		"//192.168.1.32/homeassistant/packages/weather.yaml",
		"//192.168.1.32/homeassistant/include/sensors.yaml",
		"//192.168.1.32/homeassistant/custom_components/sensor/mitemp.py",
		"/D/code/rpi/sampleconfigs/homeassistant-config-arsaboo/custom_components/climate/lyric.py",
		"/D/code/rpi/sampleconfigs/homeassistant-config-arsaboo/custom_components/climate/services.yaml",
		"//192.168.1.32/homeassistant/include/weather.yaml",
		"/D/code/rpi/sample_ha+config_ccostan/config/packages/floorplan.yaml",
		"/D/code/rpi/sample_ha+config_ccostan/config/packages/README.md",
		"//192.168.1.32/homeassistant/.HA_VERSION",
		"/C/Users/livflore/AppData/Local/Temp/7zO817DCA0A/package.ini",
		"/C/Users/livflore/AppData/Local/Temp/7zE8172418B/package.ini",
		"/Z/p4/dev/ixload/protocols/voice/main/build_context.ini",
		"/Z/p4/dev2/ixload/protocols/voice/main/build.sh",
		"/Z/p4/dev2/aptixia/pkgget/pkgget.py",
		"/Z/p4/dev2/p4.config",
		"/Z/p4/dev/p4.config",
		"/D/p4/dev/aptixia/pkgget/test.py",
		"/D/p4/dev/aptixia/pkgget/pkgget.ini",
		"/D/p4/dev/packages/sdm/sdmcslib/ixload/build_context.ini",
		"/D/p4/dev/ixload/apps/ixload/main/ixload_apps-build_context.ini",
		"/D/code/rpi/HA.config/configuration.yaml",
		"/D/code/rpi/ha_config/secrets.yaml",
		"/D/code/rpi/ha_config/include/zones.yaml",
		"/D/code/rpi/ha_config/include/panels.yaml",
		"/D/code/rpi/ha_config/include/sensors.yaml"
	],
	"find":
	{
		"height": 49.0
	},
	"find_in_files":
	{
		"height": 190.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Ext.",
			"Ext.Viewport",
			"app",
			"App",
			"app",
			"App",
			"sgv",
			"here",
			"RSSdldApiServer",
			"suppress",
			"datetime",
			"get_payload",
			"addRecord",
			"RESTRequestHandler",
			"get_payload",
			"handle_method",
			"do_HEAD",
			"RESTRequestHandler",
			"ThreadingHTTPServer",
			"ThreadedHTTPServer",
			"RESTRequestHandler",
			"get_route",
			"HTTPServer",
			"BaseHTTPRequestHandler",
			"get_method",
			"get_records",
			"rest_call_json",
			"MethodRequest",
			"rest_call_json",
			"MethodRequest",
			"here",
			"HTTPServer",
			"BaseHTTPServer",
			"urllib2",
			"urllib",
			"urllib3",
			"urllib2",
			"print",
			"server_close",
			"sys.path",
			"==== ",
			"SeriesName",
			" \n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "rssdldmng.service.orig",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 204,
						"regions":
						{
						},
						"selection":
						[
							[
								204,
								204
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1322,
						"regions":
						{
						},
						"selection":
						[
							[
								631,
								631
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/E/stuff/floorplan/floorplan.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1050,
						"regions":
						{
						},
						"selection":
						[
							[
								729,
								729
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/E/stuff/floorplan/floorplan.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9558,
						"regions":
						{
						},
						"selection":
						[
							[
								3971,
								3983
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1016,
						"regions":
						{
						},
						"selection":
						[
							[
								217,
								217
							]
						],
						"settings":
						{
							"syntax": "Packages/zzz A File Icon zzz/aliases/Shell Script (Git).sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "rssdldmng.service",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 220,
						"regions":
						{
						},
						"selection":
						[
							[
								192,
								192
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "install.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 314,
						"regions":
						{
						},
						"selection":
						[
							[
								314,
								314
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "make_service.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 560,
						"regions":
						{
						},
						"selection":
						[
							[
								180,
								180
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "rssdldmng/config.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3596,
						"regions":
						{
						},
						"selection":
						[
							[
								597,
								597
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "rssdldmng/const.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 415,
						"regions":
						{
						},
						"selection":
						[
							[
								415,
								415
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "rssdldmng/rssdld/downloader.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5493,
						"regions":
						{
						},
						"selection":
						[
							[
								5448,
								5448
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2112.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "rssdldmng/rssdld/showsdb.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2818,
						"regions":
						{
						},
						"selection":
						[
							[
								2260,
								2260
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 672.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "rssdldmng/rssdldmng.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2856,
						"regions":
						{
						},
						"selection":
						[
							[
								713,
								713
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 48.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "rssdldmng/rssdldapi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1497,
						"regions":
						{
						},
						"selection":
						[
							[
								1494,
								1494
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "rssdldmng/restserver.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4472,
						"regions":
						{
						},
						"selection":
						[
							[
								3570,
								3570
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1200.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 15,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2637,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										221,
										231
									],
									[
										312,
										322
									],
									[
										623,
										633
									],
									[
										869,
										879
									],
									[
										1109,
										1116
									],
									[
										1300,
										1307
									],
									[
										1475,
										1482
									],
									[
										1617,
										1624
									],
									[
										1827,
										1834
									],
									[
										2001,
										2008
									],
									[
										2315,
										2322
									],
									[
										2530,
										2537
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								2154,
								2154
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 928.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "rssdldmng/rssdld/episode.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2904,
						"regions":
						{
						},
						"selection":
						[
							[
								2345,
								2345
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1031.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 63.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "rssdldmng.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 354.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 374.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 266.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
